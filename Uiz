--xynware

getgenv().GG = {
    Language = {
        CheckboxEnabled = "Enabled",
        CheckboxDisabled = "Disabled",
        SliderValue = "Value",
        DropdownSelect = "Select",
        DropdownNone = "None",
        DropdownSelected = "Selected",
        ButtonClick = "Click",
        TextboxEnter = "Enter",
        ModuleEnabled = "Enabled",
        ModuleDisabled = "Disabled",
        TabGeneral = "General",
        TabSettings = "Settings",
        Loading = "Loading...",
        Error = "Error",
        Success = "Success"
    }
}

local SelectedLanguage = GG.Language

function convertStringToTable(inputString)
    local result = {}
    for value in string.gmatch(inputString, "([^,]+)") do
        local trimmedValue = value:match("^%s*(.-)%s*$")
        table.insert(result, trimmedValue)
    end
    return result
end

function convertTableToString(inputTable)
    return table.concat(inputTable, ", ")
end

local UserInputService = cloneref(game:GetService('UserInputService'))
local ContentProvider = cloneref(game:GetService('ContentProvider'))
local TweenService = cloneref(game:GetService('TweenService'))
local HttpService = cloneref(game:GetService('HttpService'))
local TextService = cloneref(game:GetService('TextService'))
local RunService = cloneref(game:GetService('RunService'))
local Lighting = cloneref(game:GetService('Lighting'))
local Players = cloneref(game:GetService('Players'))
local CoreGui = cloneref(game:GetService('CoreGui'))
local Debris = cloneref(game:GetService('Debris'))

local mouse = Players.LocalPlayer:GetMouse()
local old_Xynware = CoreGui:FindFirstChild('Xynware')

if old_Xynware then
    Debris:AddItem(old_Xynware, 0)
end

if not isfolder("Xynware") then
    makefolder("Xynware")
end

local Connections = setmetatable({
    disconnect = function(self, connection)
        if not self[connection] then
            return
        end
        self[connection]:Disconnect()
        self[connection] = nil
    end,
    disconnect_all = function(self)
        for _, value in self do
            if typeof(value) == 'function' then
                continue
            end
            value:Disconnect()
        end
    end
}, {__index = {}})

local Util = setmetatable({
    map = function(self, value, in_minimum, in_maximum, out_minimum, out_maximum)
        return (value - in_minimum) * (out_maximum - out_minimum) / (in_maximum - in_minimum) + out_minimum
    end,
    viewport_point_to_world = function(self, location, distance)
        local unit_ray = workspace.CurrentCamera:ScreenPointToRay(location.X, location.Y)
        return unit_ray.Origin + unit_ray.Direction * distance
    end,
    get_offset = function(self)
        local viewport_size_Y = workspace.CurrentCamera.ViewportSize.Y
        return self:map(viewport_size_Y, 0, 2560, 8, 56)
    end
}, {__index = {}})

local AcrylicBlur = {}
AcrylicBlur.__index = AcrylicBlur

function AcrylicBlur.new(object)
    local self = setmetatable({
        _object = object,
        _folder = nil,
        _frame = nil,
        _root = nil
    }, AcrylicBlur)
    self:setup()
    return self
end

function AcrylicBlur:create_folder()
    local old_folder = workspace.CurrentCamera:FindFirstChild('AcrylicBlur')
    if old_folder then
        Debris:AddItem(old_folder, 0)
    end
    local folder = Instance.new('Folder')
    folder.Name = 'AcrylicBlur'
    folder.Parent = workspace.CurrentCamera
    self._folder = folder
end

function AcrylicBlur:create_depth_of_fields()
    local depth_of_fields = Lighting:FindFirstChild('AcrylicBlur') or Instance.new('DepthOfFieldEffect')
    depth_of_fields.FarIntensity = 0
    depth_of_fields.FocusDistance = 0.05
    depth_of_fields.InFocusRadius = 0.1
    depth_of_fields.NearIntensity = 1
    depth_of_fields.Name = 'AcrylicBlur'
    depth_of_fields.Parent = Lighting
    for _, object in Lighting:GetChildren() do
        if not object:IsA('DepthOfFieldEffect') or object == depth_of_fields then
            continue
        end
        Connections[object] = object:GetPropertyChangedSignal('FarIntensity'):Connect(function()
            object.FarIntensity = 0
        end)
        object.FarIntensity = 0
    end
end

function AcrylicBlur:create_frame()
    local frame = Instance.new('Frame')
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundTransparency = 1
    frame.Parent = self._object
    self._frame = frame
end

function AcrylicBlur:create_root()
    local part = Instance.new('Part')
    part.Name = 'Root'
    part.Color = Color3.fromRGB(0, 0, 0)
    part.Material = Enum.Material.Glass
    part.Size = Vector3.new(1, 1, 0)
    part.Anchored = true
    part.CanCollide = false
    part.CanQuery = false
    part.Locked = true
    part.CastShadow = false
    part.Transparency = 0.98
    part.Parent = self._folder
    local specialMesh = Instance.new('SpecialMesh')
    specialMesh.MeshType = Enum.MeshType.Brick
    specialMesh.Offset = Vector3.new(0, 0, -0.000001)
    specialMesh.Parent = part
    self._root = part
end

function AcrylicBlur:setup()
    self:create_depth_of_fields()
    self:create_folder()
    self:create_root()
    self:create_frame()
    self:render(0.001)
    self:check_quality_level()
end

function AcrylicBlur:render(distance)
    local positions = {
        top_left = Vector2.new(),
        top_right = Vector2.new(),
        bottom_right = Vector2.new(),
    }
    local function update_positions(size, position)
        positions.top_left = position
        positions.top_right = position + Vector2.new(size.X, 0)
        positions.bottom_right = position + size
    end
    local function update()
        local top_left = positions.top_left
        local top_right = positions.top_right
        local bottom_right = positions.bottom_right
        local top_left3D = Util:viewport_point_to_world(top_left, distance)
        local top_right3D = Util:viewport_point_to_world(top_right, distance)
        local bottom_right3D = Util:viewport_point_to_world(bottom_right, distance)
        local width = (top_right3D - top_left3D).Magnitude
        local height = (top_right3D - bottom_right3D).Magnitude
        if not self._root then
            return
        end
        self._root.CFrame = CFrame.fromMatrix((top_left3D + bottom_right3D) / 2, workspace.CurrentCamera.CFrame.XVector, workspace.CurrentCamera.CFrame.YVector, workspace.CurrentCamera.CFrame.ZVector)
        self._root.Mesh.Scale = Vector3.new(width, height, 0)
    end
    local function on_change()
        local offset = Util:get_offset()
        local size = self._frame.AbsoluteSize - Vector2.new(offset, offset)
        local position = self._frame.AbsolutePosition + Vector2.new(offset / 2, offset / 2)
        update_positions(size, position)
        task.spawn(update)
    end
    Connections['cframe_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('CFrame'):Connect(update)
    Connections['viewport_size_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(update)
    Connections['field_of_view_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('FieldOfView'):Connect(update)
    Connections['frame_absolute_position'] = self._frame:GetPropertyChangedSignal('AbsolutePosition'):Connect(on_change)
    Connections['frame_absolute_size'] = self._frame:GetPropertyChangedSignal('AbsoluteSize'):Connect(on_change)
    task.spawn(update)
end

function AcrylicBlur:check_quality_level()
    local game_settings = UserSettings().GameSettings
    local quality_level = game_settings.SavedQualityLevel.Value
    if quality_level < 8 then
        self:change_visiblity(false)
    end
    Connections['quality_level'] = game_settings:GetPropertyChangedSignal('SavedQualityLevel'):Connect(function()
        local quality_level = game_settings.SavedQualityLevel.Value
        self:change_visiblity(quality_level >= 8)
    end)
end

function AcrylicBlur:change_visiblity(state)
    self._root.Transparency = state and 0.98 or 1
end

local Config = setmetatable({
    save = function(self, file_name, config)
        local success_save, result = pcall(function()
            local flags = HttpService:JSONEncode(config)
            writefile('Xynware/'..file_name..'.json', flags)
        end)
        if not success_save then
            warn('failed to save config', result)
        end
    end,
    load = function(self, file_name, config)
        local success_load, result = pcall(function()
            if not isfile('Xynware/'..file_name..'.json') then
                self:save(file_name, config)
                return
            end
            local flags = readfile('Xynware/'..file_name..'.json')
            if not flags then
                self:save(file_name, config)
                return
            end
            return HttpService:JSONDecode(flags)
        end)
        if not success_load then
            warn('failed to load config', result)
        end
        if not result then
            result = {
                _flags = {},
                _keybinds = {},
                _library = {}
            }
        end
        return result
    end
}, {__index = {}})

local Library = {
    _config = Config:load(game.GameId),
    _choosing_keybind = false,
    _device = nil,
    _ui_open = true,
    _ui_scale = 1,
    _ui_loaded = false,
    _ui = nil,
    _dragging = false,
    _drag_start = nil,
    _container_position = nil
}
Library.__index = Library

function Library.new()
    local self = setmetatable({
        _loaded = false,
        _tab = 0,
    }, Library)
    self:create_ui()
    return self
end

local NotificationContainer = Instance.new("Frame")
NotificationContainer.Name = "XynwareCoreGuis"
NotificationContainer.Size = UDim2.new(0, 300, 0, 0)
NotificationContainer.Position = UDim2.new(0.8, 0, 0, 10)
NotificationContainer.BackgroundTransparency = 1
NotificationContainer.ClipsDescendants = false
NotificationContainer.Parent = game:GetService("CoreGui").RobloxGui:FindFirstChild("XynwareCoreGuis") or Instance.new("ScreenGui", game:GetService("CoreGui").RobloxGui)
NotificationContainer.AutomaticSize = Enum.AutomaticSize.Y

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.Parent = NotificationContainer

function Library.SendNotification(settings)
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(1, 0, 0, 60)
    Notification.BackgroundTransparency = 1
    Notification.BorderSizePixel = 0
    Notification.Name = "Notification"
    Notification.Parent = NotificationContainer
    Notification.AutomaticSize = Enum.AutomaticSize.Y
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Notification
    local InnerFrame = Instance.new("Frame")
    InnerFrame.Size = UDim2.new(1, 0, 0, 60)
    InnerFrame.Position = UDim2.new(0, 0, 0, 0)
    InnerFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    InnerFrame.BackgroundTransparency = 0.1
    InnerFrame.BorderSizePixel = 0
    InnerFrame.Name = "InnerFrame"
    InnerFrame.Parent = Notification
    InnerFrame.AutomaticSize = Enum.AutomaticSize.Y
    local InnerUICorner = Instance.new("UICorner")
    InnerUICorner.CornerRadius = UDim.new(0, 4)
    InnerUICorner.Parent = InnerFrame
    local Title = Instance.new("TextLabel")
    Title.Text = settings.title or "Notification Title"
    Title.TextColor3 = Color3.fromRGB(255, 0, 0)
    Title.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    Title.TextSize = 14
    Title.Size = UDim2.new(1, -10, 0, 20)
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.BackgroundTransparency = 1
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Center
    Title.TextWrapped = true
    Title.AutomaticSize = Enum.AutomaticSize.Y
    Title.Parent = InnerFrame
    local Body = Instance.new("TextLabel")
    Body.Text = settings.text or "This is the body of the notification."
    Body.TextColor3 = Color3.fromRGB(200, 0, 0)
    Body.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    Body.TextSize = 12
    Body.Size = UDim2.new(1, -10, 0, 30)
    Body.Position = UDim2.new(0, 5, 0, 25)
    Body.BackgroundTransparency = 1
    Body.TextXAlignment = Enum.TextXAlignment.Left
    Body.TextYAlignment = Enum.TextYAlignment.Top
    Body.TextWrapped = true
    Body.AutomaticSize = Enum.AutomaticSize.Y
    Body.Parent = InnerFrame
    task.spawn(function()
        wait(0.1)
        local totalHeight = Title.TextBounds.Y + Body.TextBounds.Y + 10
        InnerFrame.Size = UDim2.new(1, 0, 0, totalHeight)
    end)
    task.spawn(function()
        local tweenIn = TweenService:Create(InnerFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Position = UDim2.new(0, 0, 0, 10 + NotificationContainer.Size.Y.Offset)
        })
        tweenIn:Play()
        local duration = settings.duration or 5
        wait(duration)
        local tweenOut = TweenService:Create(InnerFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 310, 0, 10 + NotificationContainer.Size.Y.Offset)
        })
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            Notification:Destroy()
        end)
    end)
end

function Library:get_screen_scale()
    local viewport_size_x = workspace.CurrentCamera.ViewportSize.X
    self._ui_scale = viewport_size_x / 1400
end

function Library:get_device()
    local device = 'Unknown'
    if not UserInputService.TouchEnabled and UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
        device = 'PC'
    elseif UserInputService.TouchEnabled then
        device = 'Mobile'
    elseif UserInputService.GamepadEnabled then
        device = 'Console'
    end
    self._device = device
end

function Library:removed(action)
    self._ui.AncestryChanged:Once(action)
end

function Library:flag_type(flag, flag_type)
    if not Library._config._flags[flag] then
        return
    end
    return typeof(Library._config._flags[flag]) == flag_type
end

function Library:remove_table_value(__table, table_value)
    for index, value in __table do
        if value ~= table_value then
            continue
        end
        table.remove(__table, index)
    end
end

function Library:create_ui()
    local old_Xynware = CoreGui:FindFirstChild('Xynware')
    if old_Xynware then
        Debris:AddItem(old_Xynware, 0)
    end
    local Xynware = Instance.new('ScreenGui')
    Xynware.ResetOnSpawn = false
    Xynware.Name = 'Xynware'
    Xynware.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    Xynware.Parent = CoreGui
    local Container = Instance.new('Frame')
    Container.ClipsDescendants = true
    Container.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.Name = 'Container'
    Container.BackgroundTransparency = 0.05
    Container.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Container.Position = UDim2.new(0.5, 0, 0.5, 0)
    Container.Size = UDim2.new(0, 0, 0, 0)
    Container.Active = true
    Container.BorderSizePixel = 0
    Container.Parent = Xynware
    local UICorner = Instance.new('UICorner')
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = Container
    local UIStroke = Instance.new('UIStroke')
    UIStroke.Color = Color3.fromRGB(255, 0, 0)
    UIStroke.Transparency = 0.5
    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    UIStroke.Parent = Container
    local Handler = Instance.new('Frame')
    Handler.BackgroundTransparency = 1
    Handler.Name = 'Handler'
    Handler.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Handler.Size = UDim2.new(0, 698, 0, 479)
    Handler.BorderSizePixel = 0
    Handler.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Handler.Parent = Container
    local Tabs = Instance.new('ScrollingFrame')
    Tabs.ScrollBarImageTransparency = 1
    Tabs.ScrollBarThickness = 0
    Tabs.Name = 'Tabs'
    Tabs.Size = UDim2.new(0, 129, 0, 401)
    Tabs.Selectable = false
    Tabs.AutomaticCanvasSize = Enum.AutomaticSize.XY
    Tabs.BackgroundTransparency = 1
    Tabs.Position = UDim2.new(0.026, 0, 0.111, 0)
    Tabs.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Tabs.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Tabs.BorderSizePixel = 0
    Tabs.CanvasSize = UDim2.new(0, 0, 0.5, 0)
    Tabs.Parent = Handler
    local UIListLayout = Instance.new('UIListLayout')
    UIListLayout.Padding = UDim.new(0, 4)
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = Tabs
    local ClientName = Instance.new('TextLabel')
    ClientName.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    ClientName.TextColor3 = Color3.fromRGB(255, 0, 0)
    ClientName.TextTransparency = 0.2
    ClientName.Text = 'Xynware'
    ClientName.Name = 'ClientName'
    ClientName.Size = UDim2.new(0, 31, 0, 13)
    ClientName.AnchorPoint = Vector2.new(0, 0.5)
    ClientName.Position = UDim2.new(0.056, 0, 0.055, 0)
    ClientName.BackgroundTransparency = 1
    ClientName.TextXAlignment = Enum.TextXAlignment.Left
    ClientName.BorderSizePixel = 0
    ClientName.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ClientName.TextSize = 13
    ClientName.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    ClientName.Parent = Handler
    local UIGradient = Instance.new('UIGradient')
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 0, 0))
    }
    UIGradient.Parent = ClientName
    local Pin = Instance.new('Frame')
    Pin.Name = 'Pin'
    Pin.Position = UDim2.new(0.026, 0, 0.136, 0)
    Pin.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Pin.Size = UDim2.new(0, 2, 0, 16)
    Pin.BorderSizePixel = 0
    Pin.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    Pin.Parent = Handler
    local UICorner = Instance.new('UICorner')
    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = Pin
    local Icon = Instance.new('ImageLabel')
    Icon.ImageColor3 = Color3.fromRGB(255, 0, 0)
    Icon.ScaleType = Enum.ScaleType.Fit
    Icon.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.Image = 'rbxassetid://107819132007001'
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0.025, 0, 0.055, 0)
    Icon.Name = 'Icon'
    Icon.Size = UDim2.new(0, 18, 0, 18)
    Icon.BorderSizePixel = 0
    Icon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Icon.Parent = Handler
    local Divider = Instance.new('Frame')
    Divider.Name = 'Divider'
    Divider.BackgroundTransparency = 0.5
    Divider.Position = UDim2.new(0.235, 0, 0, 0)
    Divider.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Divider.Size = UDim2.new(0, 1, 0, 479)
    Divider.BorderSizePixel = 0
    Divider.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    Divider.Parent = Handler
    local Sections = Instance.new('Folder')
    Sections.Name = 'Sections'
    Sections.Parent = Handler
    local Minimize = Instance.new('TextButton')
    Minimize.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    Minimize.TextColor3 = Color3.fromRGB(0, 0, 0)
    Minimize.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Minimize.Text = ''
    Minimize.AutoButtonColor = false
    Minimize.Name = 'Minimize'
    Minimize.BackgroundTransparency = 1
    Minimize.Position = UDim2.new(0.02, 0, 0.029, 0)
    Minimize.Size = UDim2.new(0, 24, 0, 24)
    Minimize.BorderSizePixel = 0
    Minimize.TextSize = 14
    Minimize.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Minimize.Parent = Handler
    local UIScale = Instance.new('UIScale')
    UIScale.Parent = Container
    self._ui = Xynware
    local function on_drag(input, process)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self._dragging = true
            self._drag_start = input.Position
            self._container_position = Container.Position
            Connections['container_input_ended'] = input.Changed:Connect(function()
                if input.UserInputState ~= Enum.UserInputState.End then
                    return
                end
                Connections:disconnect('container_input_ended')
                self._dragging = false
            end)
        end
    end
    local function update_drag(input)
        local delta = input.Position - self._drag_start
        local position = UDim2.new(self._container_position.X.Scale, self._container_position.X.Offset + delta.X, self._container_position.Y.Scale, self._container_position.Y.Offset + delta.Y)
        TweenService:Create(Container, TweenInfo.new(0.2), {
            Position = position
        }):Play()
    end
    local function drag(input)
        if not self._dragging then
            return
        end
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            update_drag(input)
        end
    end
    Connections['container_input_began'] = Container.InputBegan:Connect(on_drag)
    Connections['input_changed'] = UserInputService.InputChanged:Connect(drag)
    self:removed(function()
        self._ui = nil
        Connections:disconnect_all()
    end)
    function self:Update1Run(a)
        if a == "nil" then
            Container.BackgroundTransparency = 0.05
        else
            pcall(function()
                Container.BackgroundTransparency = tonumber(a)
            end)
        end
    end
    function self:UIVisiblity()
        Xynware.Enabled = not Xynware.Enabled
    end
    function self:change_visiblity(state)
        if state then
            TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.fromOffset(698, 479)
            }):Play()
        else
            TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.fromOffset(104.5, 52)
            }):Play()
        end
    end
    function self:load()
        local content = {}
        for _, object in Xynware:GetDescendants() do
            if not object:IsA('ImageLabel') then
                continue
            end
            table.insert(content, object)
        end
        ContentProvider:PreloadAsync(content)
        self:get_device()
        if self._device == 'Mobile' or self._device == 'Unknown' then
            self:get_screen_scale()
            UIScale.Scale = self._ui_scale
            Connections['ui_scale'] = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(function()
                self:get_screen_scale()
                UIScale.Scale = self._ui_scale
            end)
        end
        TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Size = UDim2.fromOffset(698, 479)
        }):Play()
        AcrylicBlur.new(Container)
        self._ui_loaded = true
    end
    function self:update_tabs(tab)
        for _, object in Tabs:GetChildren() do
            if object.Name ~= 'Tab' then
                continue
            end
            if object == tab then
                if object.BackgroundTransparency ~= 0.5 then
                    local offset = object.LayoutOrder * (0.113 / 1.3)
                    TweenService:Create(Pin, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Position = UDim2.fromScale(0.026, 0.135 + offset)
                    }):Play()
                    TweenService:Create(object, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundTransparency = 0.5
                    }):Play()
                    TweenService:Create(object.TextLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        TextTransparency = 0.2,
                        TextColor3 = Color3.fromRGB(255, 0, 0)
                    }):Play()
                    TweenService:Create(object.TextLabel.UIGradient, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Offset = Vector2.new(1, 0)
                    }):Play()
                    TweenService:Create(object.Icon, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        ImageTransparency = 0.2,
                        ImageColor3 = Color3.fromRGB(255, 0, 0)
                    }):Play()
                end
                continue
            end
            if object.BackgroundTransparency ~= 1 then
                TweenService:Create(object, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 1
                }):Play()
                TweenService:Create(object.TextLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    TextTransparency = 0.7,
                    TextColor3 = Color3.fromRGB(255, 255, 255)
                }):Play()
                TweenService:Create(object.TextLabel.UIGradient, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    Offset = Vector2.new(0, 0)
                }):Play()
                TweenService:Create(object.Icon, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    ImageTransparency = 0.8,
                    ImageColor3 = Color3.fromRGB(255, 255, 255)
                }):Play()
            end
        end
    end
    function self:update_sections(left_section, right_section)
        for _, object in Sections:GetChildren() do
            if object == left_section or object == right_section then
                object.Visible = true
                continue
            end
            object.Visible = false
        end
    end
-- Dependencies from xynware_core.lua
local Library = getgenv().Library
local Tabs = getgenv().Tabs
local Sections = getgenv().Sections
local TweenService = getgenv().TweenService
local TextService = getgenv().TextService
local UserInputService = getgenv().UserInputService
local Config = getgenv().Config
local Connections = getgenv().Connections
local SelectedLanguage = getgenv().GG.Language

function Library:create_tab(title, icon)
    local TabManager = {}
    local font_params = Instance.new('GetTextBoundsParams')
    font_params.Text = title
    font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    font_params.Size = 13
    font_params.Width = 10000
    local font_size = TextService:GetTextBoundsAsync(font_params)
    local first_tab = not Tabs:FindFirstChild('Tab')
    local Tab = Instance.new('TextButton')
    Tab.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    Tab.TextColor3 = Color3.fromRGB(0, 0, 0)
    Tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Tab.Text = ''
    Tab.AutoButtonColor = false
    Tab.BackgroundTransparency = 1
    Tab.Name = 'Tab'
    Tab.Size = UDim2.new(0, 129, 0, 38)
    Tab.BorderSizePixel = 0
    Tab.TextSize = 14
    Tab.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Tab.Parent = Tabs
    Tab.LayoutOrder = self._tab
    self._tab = self._tab + 1
    local UICorner = Instance.new('UICorner')
    UICorner.CornerRadius = UDim.new(0, 5)
    UICorner.Parent = Tab
    local TextLabel = Instance.new('TextLabel')
    TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextTransparency = 0.7
    TextLabel.Text = title
    TextLabel.Size = UDim2.new(0, font_size.X, 0, 16)
    TextLabel.AnchorPoint = Vector2.new(0, 0.5)
    TextLabel.Position = UDim2.new(0.24, 0, 0.5, 0)
    TextLabel.BackgroundTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.BorderSizePixel = 0
    TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.TextSize = 13
    TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.Parent = Tab
    local UIGradient = Instance.new('UIGradient')
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.7, Color3.fromRGB(200, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 0, 0))
    }
    UIGradient.Parent = TextLabel
    local Icon = Instance.new('ImageLabel')
    Icon.ScaleType = Enum.ScaleType.Fit
    Icon.ImageTransparency = 0.8
    Icon.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0.1, 0, 0.5, 0)
    Icon.Name = 'Icon'
    Icon.Image = icon
    Icon.Size = UDim2.new(0, 12, 0, 12)
    Icon.BorderSizePixel = 0
    Icon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Icon.Parent = Tab
    local LeftSection = Instance.new('ScrollingFrame')
    LeftSection.Name = 'LeftSection'
    LeftSection.AutomaticCanvasSize = Enum.AutomaticSize.XY
    LeftSection.ScrollBarThickness = 0
    LeftSection.Size = UDim2.new(0, 243, 0, 445)
    LeftSection.Selectable = false
    LeftSection.AnchorPoint = Vector2.new(0, 0.5)
    LeftSection.ScrollBarImageTransparency = 1
    LeftSection.BackgroundTransparency = 1
    LeftSection.Position = UDim2.new(0.259, 0, 0.5, 0)
    LeftSection.BorderColor3 = Color3.fromRGB(0, 0, 0)
    LeftSection.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    LeftSection.BorderSizePixel = 0
    LeftSection.CanvasSize = UDim2.new(0, 0, 0.5, 0)
    LeftSection.Visible = first_tab
    LeftSection.Parent = Sections
    local LeftUIListLayout = Instance.new('UIListLayout')
    LeftUIListLayout.Padding = UDim.new(0, 11)
    LeftUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    LeftUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    LeftUIListLayout.Parent = LeftSection
    local LeftUIPadding = Instance.new('UIPadding')
    LeftUIPadding.PaddingTop = UDim.new(0, 1)
    LeftUIPadding.Parent = LeftSection
    local RightSection = Instance.new('ScrollingFrame')
    RightSection.Name = 'RightSection'
    RightSection.AutomaticCanvasSize = Enum.AutomaticSize.XY
    RightSection.ScrollBarThickness = 0
    RightSection.Size = UDim2.new(0, 243, 0, 445)
    RightSection.Selectable = false
    RightSection.AnchorPoint = Vector2.new(0, 0.5)
    RightSection.ScrollBarImageTransparency = 1
    RightSection.BackgroundTransparency = 1
    RightSection.Position = UDim2.new(0.629, 0, 0.5, 0)
    RightSection.BorderColor3 = Color3.fromRGB(0, 0, 0)
    RightSection.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    RightSection.BorderSizePixel = 0
    RightSection.CanvasSize = UDim2.new(0, 0, 0.5, 0)
    RightSection.Visible = first_tab
    RightSection.Parent = Sections
    local RightUIListLayout = Instance.new('UIListLayout')
    RightUIListLayout.Padding = UDim.new(0, 11)
    RightUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    RightUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    RightUIListLayout.Parent = RightSection
    local RightUIPadding = Instance.new('UIPadding')
    RightUIPadding.PaddingTop = UDim.new(0, 1)
    RightUIPadding.Parent = RightSection
    Tab.MouseButton1Click:Connect(function()
        self:update_tabs(Tab)
        self:update_sections(LeftSection, RightSection)
    end)
    if first_tab then
        self:update_tabs(Tab)
    end
    function TabManager:CreateModule(title)
        local ModuleManager = {}
        local font_params = Instance.new('GetTextBoundsParams')
        font_params.Text = title
        font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        font_params.Size = 13
        font_params.Width = 10000
        local font_size = TextService:GetTextBoundsAsync(font_params)
        local Module = Instance.new('Frame')
        Module.Name = title
        Module.BackgroundTransparency = 0.05
        Module.Size = UDim2.new(0, 231, 0, 0)
        Module.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Module.BorderSizePixel = 0
        Module.Parent = LeftSection
        Module.AutomaticSize = Enum.AutomaticSize.Y
        local UICorner = Instance.new('UICorner')
        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = Module
        local UIStroke = Instance.new('UIStroke')
        UIStroke.Color = Color3.fromRGB(255, 0, 0)
        UIStroke.Transparency = 0.5
        UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        UIStroke.Parent = Module
        local Inner = Instance.new('Frame')
        Inner.Name = 'Inner'
        Inner.BackgroundTransparency = 1
        Inner.Size = UDim2.new(1, 0, 0, 0)
        Inner.BorderSizePixel = 0
        Inner.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Inner.Parent = Module
        Inner.AutomaticSize = Enum.AutomaticSize.Y
        local InnerUIListLayout = Instance.new('UIListLayout')
        InnerUIListLayout.Padding = UDim.new(0, 8)
        InnerUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        InnerUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        InnerUIListLayout.Parent = Inner
        local InnerUIPadding = Instance.new('UIPadding')
        InnerUIPadding.PaddingTop = UDim.new(0, 8)
        InnerUIPadding.PaddingBottom = UDim.new(0, 8)
        InnerUIPadding.Parent = Inner
        local ModuleTitle = Instance.new('TextLabel')
        ModuleTitle.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        ModuleTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
        ModuleTitle.TextTransparency = 0.2
        ModuleTitle.Text = title
        ModuleTitle.Size = UDim2.new(0, font_size.X, 0, 16)
        ModuleTitle.Position = UDim2.new(0.04, 0, 0, 8)
        ModuleTitle.BackgroundTransparency = 1
        ModuleTitle.TextXAlignment = Enum.TextXAlignment.Left
        ModuleTitle.BorderSizePixel = 0
        ModuleTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
        ModuleTitle.TextSize = 13
        ModuleTitle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        ModuleTitle.Parent = Inner
        local UIGradient = Instance.new('UIGradient')
        UIGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 0, 0))
        }
        UIGradient.Parent = ModuleTitle
        local Holder = Instance.new('Frame')
        Holder.Name = 'Holder'
        Holder.BackgroundTransparency = 1
        Holder.Size = UDim2.new(1, 0, 0, 0)
        Holder.BorderSizePixel = 0
        Holder.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Holder.Parent = Inner
        Holder.AutomaticSize = Enum.AutomaticSize.Y
        local HolderUIListLayout = Instance.new('UIListLayout')
        HolderUIListLayout.Padding = UDim.new(0, 8)
        HolderUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        HolderUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        HolderUIListLayout.Parent = Holder
        local HolderUIPadding = Instance.new('UIPadding')
        HolderUIPadding.PaddingTop = UDim.new(0, 8)
        HolderUIPadding.Parent = Holder
        function ModuleManager:CreateParagraph(title, text)
            local font_params_title = Instance.new('GetTextBoundsParams')
            font_params_title.Text = title
            font_params_title.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            font_params_title.Size = 13
            font_params_title.Width = 200
            local title_size = TextService:GetTextBoundsAsync(font_params_title)
            local font_params_text = Instance.new('GetTextBoundsParams')
            font_params_text.Text = text
            font_params_text.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params_text.Size = 12
            font_params_text.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params_text)
            local Paragraph = Instance.new('Frame')
            Paragraph.Name = 'Paragraph'
            Paragraph.BackgroundTransparency = 1
            Paragraph.Size = UDim2.new(0, 231, 0, 0)
            Paragraph.BorderSizePixel = 0
            Paragraph.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Paragraph.Parent = Holder
            Paragraph.AutomaticSize = Enum.AutomaticSize.Y
            local ParagraphUIListLayout = Instance.new('UIListLayout')
            ParagraphUIListLayout.Padding = UDim.new(0, 4)
            ParagraphUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            ParagraphUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ParagraphUIListLayout.Parent = Paragraph
            local Title = Instance.new('TextLabel')
            Title.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            Title.TextColor3 = Color3.fromRGB(255, 0, 0)
            Title.TextTransparency = 0.2
            Title.Text = title
            Title.Size = UDim2.new(0, 200, 0, title_size.Y)
            Title.BackgroundTransparency = 1
            Title.TextXAlignment = Enum.TextXAlignment.Left
            Title.BorderSizePixel = 0
            Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Title.TextSize = 13
            Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Title.TextWrapped = true
            Title.Parent = Paragraph
            local Text = Instance.new('TextLabel')
            Text.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Text.TextColor3 = Color3.fromRGB(200, 0, 0)
            Text.TextTransparency = 0.2
            Text.Text = text
            Text.Size = UDim2.new(0, 200, 0, text_size.Y)
            Text.BackgroundTransparency = 1
            Text.TextXAlignment = Enum.TextXAlignment.Left
            Text.BorderSizePixel = 0
            Text.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Text.TextSize = 12
            Text.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Text.TextWrapped = true
            Text.Parent = Paragraph
        end
        function ModuleManager:CreateText(text)
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Text = Instance.new('TextLabel')
            Text.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Text.TextColor3 = Color3.fromRGB(200, 0, 0)
            Text.TextTransparency = 0.2
            Text.Text = text
            Text.Size = UDim2.new(0, 200, 0, text_size.Y)
            Text.BackgroundTransparency = 1
            Text.TextXAlignment = Enum.TextXAlignment.Left
            Text.BorderSizePixel = 0
            Text.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Text.TextSize = 12
            Text.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Text.TextWrapped = true
            Text.Parent = Holder
        end
        function ModuleManager:CreateTextbox(text, flag, callback)
            local TextboxManager = {}
            Library._config._flags[flag] = Library._config._flags[flag] or text
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Textbox = Instance.new('Frame')
            Textbox.Name = 'Textbox'
            Textbox.BackgroundTransparency = 0.05
            Textbox.Size = UDim2.new(0, 231, 0, 30)
            Textbox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Textbox.BorderSizePixel = 0
            Textbox.Parent = Holder
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Textbox
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(255, 0, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Textbox
            local Input = Instance.new('TextBox')
            Input.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Input.TextColor3 = Color3.fromRGB(200, 0, 0)
            Input.TextTransparency = 0.2
            Input.Text = Library._config._flags[flag]
            Input.PlaceholderText = text
            Input.Size = UDim2.new(0, 200, 0, 20)
            Input.Position = UDim2.new(0.5, 0, 0.5, 0)
            Input.AnchorPoint = Vector2.new(0.5, 0.5)
            Input.BackgroundTransparency = 1
            Input.TextXAlignment = Enum.TextXAlignment.Left
            Input.BorderSizePixel = 0
            Input.TextSize = 12
            Input.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Input.Parent = Textbox
            Input.FocusLost:Connect(function(enterPressed)
                if not enterPressed then
                    return
                end
                Library._config._flags[flag] = Input.Text
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(Input.Text)
                end
            end)
            function TextboxManager:Set(text)
                Input.Text = text
                Library._config._flags[flag] = text
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(text)
                end
            end
            return TextboxManager
        end
        function ModuleManager:CreateCheckbox(text, flag, callback)
            local CheckboxManager = {}
            Library._config._flags[flag] = Library._config._flags[flag] or false
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Checkbox = Instance.new('Frame')
            Checkbox.Name = 'Checkbox'
            Checkbox.BackgroundTransparency = 1
            Checkbox.Size = UDim2.new(0, 231, 0, 20)
            Checkbox.BorderSizePixel = 0
            Checkbox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Checkbox.Parent = Holder
            local TextLabel = Instance.new('TextLabel')
            TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            TextLabel.TextColor3 = Color3.fromRGB(200, 0, 0)
            TextLabel.TextTransparency = 0.2
            TextLabel.Text = text
            TextLabel.Size = UDim2.new(0, text_size.X, 0, 16)
            TextLabel.Position = UDim2.new(0.04, 0, 0.5, 0)
            TextLabel.AnchorPoint = Vector2.new(0, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.BorderSizePixel = 0
            TextLabel.TextSize = 12
            TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            TextLabel.Parent = Checkbox
            local Check = Instance.new('TextButton')
            Check.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Check.TextColor3 = Color3.fromRGB(0, 0, 0)
            Check.Text = ''
            Check.AutoButtonColor = false
            Check.BackgroundTransparency = Library._config._flags[flag] and 0 or 0.5
            Check.Size = UDim2.new(0, 16, 0, 16)
            Check.Position = UDim2.new(0.9, 0, 0.5, 0)
            Check.AnchorPoint = Vector2.new(0.5, 0.5)
            Check.BorderSizePixel = 0
            Check.TextSize = 14
            Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            Check.Parent = Checkbox
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Check
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(255, 0, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Check
            local Status = Instance.new('TextLabel')
            Status.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Status.TextColor3 = Color3.fromRGB(200, 0, 0)
            Status.TextTransparency = 0.2
            Status.Text = Library._config._flags[flag] and SelectedLanguage.CheckboxEnabled or SelectedLanguage.CheckboxDisabled
            Status.Size = UDim2.new(0, 50, 0, 16)
            Status.Position = UDim2.new(0.75, 0, 0.5, 0)
            Status.AnchorPoint = Vector2.new(0.5, 0.5)
            Status.BackgroundTransparency = 1
            Status.TextXAlignment = Enum.TextXAlignment.Right
            Status.BorderSizePixel = 0
            Status.TextSize = 12
            Status.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Status.Parent = Checkbox
            Check.MouseButton1Click:Connect(function()
                Library._config._flags[flag] = not Library._config._flags[flag]
                Status.Text = Library._config._flags[flag] and SelectedLanguage.CheckboxEnabled or SelectedLanguage.CheckboxDisabled
                TweenService:Create(Check, TweenInfo.new(0.2), {
                    BackgroundTransparency = Library._config._flags[flag] and 0 or 0.5
                }):Play()
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(Library._config._flags[flag])
                end
            end)
            function CheckboxManager:Set(state)
                Library._config._flags[flag] = state
                Status.Text = state and SelectedLanguage.CheckboxEnabled or SelectedLanguage.CheckboxDisabled
                TweenService:Create(Check, TweenInfo.new(0.2), {
                    BackgroundTransparency = state and 0 or 0.5
                }):Play()
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(state)
                end
            end
            return CheckboxManager
        end
        function ModuleManager:CreateSlider(text, flag, min, max, callback)
            local SliderManager = {}
            Library._config._flags[flag] = Library._config._flags[flag] or min
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Slider = Instance.new('Frame')
            Slider.Name = 'Slider'
            Slider.BackgroundTransparency = 1
            Slider.Size = UDim2.new(0, 231, 0, 40)
            Slider.BorderSizePixel = 0
            Slider.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Slider.Parent = Holder
            local TextLabel = Instance.new('TextLabel')
            TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            TextLabel.TextColor3 = Color3.fromRGB(200, 0, 0)
            TextLabel.TextTransparency = 0.2
            TextLabel.Text = text
            TextLabel.Size = UDim2.new(0, text_size.X, 0, 16)
            TextLabel.Position = UDim2.new(0.04, 0, 0, 0)
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.BorderSizePixel = 0
            TextLabel.TextSize = 12
            TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            TextLabel.Parent = Slider
            local Value = Instance.new('TextLabel')
            Value.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Value.TextColor3 = Color3.fromRGB(200, 0, 0)
            Value.TextTransparency = 0.2
            Value.Text = tostring(Library._config._flags[flag])
            Value.Size = UDim2.new(0, 50, 0, 16)
            Value.Position = UDim2.new(0.9, 0, 0, 0)
            Value.AnchorPoint = Vector2.new(0.5, 0)
            Value.BackgroundTransparency = 1
            Value.TextXAlignment = Enum.TextXAlignment.Right
            Value.BorderSizePixel = 0
            Value.TextSize = 12
            Value.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Value.Parent = Slider
            local Bar = Instance.new('Frame')
            Bar.BackgroundTransparency = 0.5
            Bar.Size = UDim2.new(0, 200, 0, 4)
            Bar.Position = UDim2.new(0.5, 0, 0.75, 0)
            Bar.AnchorPoint = Vector2.new(0.5, 0.5)
            Bar.BorderSizePixel = 0
            Bar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            Bar.Parent = Slider
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(1, 0)
            UICorner.Parent = Bar
            local Fill = Instance.new('Frame')
            Fill.Name = 'Fill'
            Fill.BackgroundTransparency = 0
            Fill.Size = UDim2.new((Library._config._flags[flag] - min) / (max - min), 0, 1, 0)
            Fill.Position = UDim2.new(0, 0, 0, 0)
            Fill.BorderSizePixel = 0
            Fill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            Fill.Parent = Bar
            local UICornerFill = Instance.new('UICorner')
            UICornerFill.CornerRadius = UDim.new(1, 0)
            UICornerFill.Parent = Fill
            local Button = Instance.new('TextButton')
            Button.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Button.TextColor3 = Color3.fromRGB(0, 0, 0)
            Button.Text = ''
            Button.AutoButtonColor = false
            Button.BackgroundTransparency = 1
            Button.Size = UDim2.new(1, 0, 1, 0)
            Button.BorderSizePixel = 0
            Button.TextSize = 14
            Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Button.Parent = Bar
            local dragging = false
            local function update_slider(input)
                local delta = input.Position.X - Bar.AbsolutePosition.X
                local value = math.clamp(delta / Bar.AbsoluteSize.X, 0, 1)
                local new_value = min + (max - min) * value
                Library._config._flags[flag] = math.floor(new_value)
                Value.Text = tostring(Library._config._flags[flag])
                TweenService:Create(Fill, TweenInfo.new(0.2), {
                    Size = UDim2.new(value, 0, 1, 0)
                }):Play()
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(Library._config._flags[flag])
                end
            end
            Button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    update_slider(input)
                end
            end)
            Button.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            Connections['slider_' .. flag] = UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    update_slider(input)
                end
            end)
            function SliderManager:Set(value)
                value = math.clamp(math.floor(value), min, max)
                Library._config._flags[flag] = value
                Value.Text = tostring(value)
                TweenService:Create(Fill, TweenInfo.new(0.2), {
                    Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                }):Play()
                Config:save(game.GameId, Library._config)
                if callback then
                    callback(value)
                end
            end
            return SliderManager
        end
        function ModuleManager:CreateDropdown(text, items, flag, callback)
            local DropdownManager = {}
            Library._config._flags[flag] = Library._config._flags[flag] or items[1] or SelectedLanguage.DropdownNone
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Dropdown = Instance.new('Frame')
            Dropdown.Name = 'Dropdown'
            Dropdown.BackgroundTransparency = 0.05
            Dropdown.Size = UDim2.new(0, 231, 0, 30)
            Dropdown.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Dropdown.BorderSizePixel = 0
            Dropdown.Parent = Holder
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Dropdown
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(255, 0, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Dropdown
            local TextLabel = Instance.new('TextLabel')
            TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            TextLabel.TextColor3 = Color3.fromRGB(200, 0, 0)
            TextLabel.TextTransparency = 0.2
            TextLabel.Text = text
            TextLabel.Size = UDim2.new(0, text_size.X, 0, 16)
            TextLabel.Position = UDim2.new(0.04, 0, 0.5, 0)
            TextLabel.AnchorPoint = Vector2.new(0, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.BorderSizePixel = 0
            TextLabel.TextSize = 12
            TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            TextLabel.Parent = Dropdown
            local Selected = Instance.new('TextLabel')
            Selected.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Selected.TextColor3 = Color3.fromRGB(200, 0, 0)
            Selected.TextTransparency = 0.2
            Selected.Text = Library._config._flags[flag]
            Selected.Size = UDim2.new(0, 100, 0, 16)
            Selected.Position = UDim2.new(0.9, 0, 0.5, 0)
            Selected.AnchorPoint = Vector2.new(0.5, 0.5)
            Selected.BackgroundTransparency = 1
            Selected.TextXAlignment = Enum.TextXAlignment.Right
            Selected.BorderSizePixel = 0
            Selected.TextSize = 12
            Selected.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Selected.Parent = Dropdown
            local Button = Instance.new('TextButton')
            Button.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Button.TextColor3 = Color3.fromRGB(0, 0, 0)
            Button.Text = ''
            Button.AutoButtonColor = false
            Button.BackgroundTransparency = 1
            Button.Size = UDim2.new(1, 0, 1, 0)
            Button.BorderSizePixel = 0
            Button.TextSize = 14
            Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Button.Parent = Dropdown
            local DropdownList = Instance.new('Frame')
            DropdownList.Name = 'DropdownList'
            DropdownList.BackgroundTransparency = 0.05
            DropdownList.Size = UDim2.new(0, 231, 0, 0)
            DropdownList.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            DropdownList.BorderSizePixel = 0
            DropdownList.Position = UDim2.new(0, 0, 1, 5)
            DropdownList.Visible = false
            DropdownList.Parent = Dropdown
            DropdownList.AutomaticSize = Enum.AutomaticSize.Y
            local ListUICorner = Instance.new('UICorner')
            ListUICorner.CornerRadius = UDim.new(0, 4)
            ListUICorner.Parent = DropdownList
            local ListUIStroke = Instance.new('UIStroke')
            ListUIStroke.Color = Color3.fromRGB(255, 0, 0)
            ListUIStroke.Transparency = 0.5
            ListUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            ListUIStroke.Parent = DropdownList
            local ListUIListLayout = Instance.new('UIListLayout')
            ListUIListLayout.Padding = UDim.new(0, 4)
            ListUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            ListUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ListUIListLayout.Parent = DropdownList
            local ListUIPadding = Instance.new('UIPadding')
            ListUIPadding.PaddingTop = UDim.new(0, 4)
            ListUIPadding.PaddingBottom = UDim.new(0, 4)
            ListUIPadding.Parent = DropdownList
            local function update_dropdown()
                for _, item in ipairs(DropdownList:GetChildren()) do
                    if item:IsA('TextButton') then
                        item:Destroy()
                    end
                end
                for _, item in ipairs(items) do
                    local ItemButton = Instance.new('TextButton')
                    ItemButton.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                    ItemButton.TextColor3 = Color3.fromRGB(200, 0, 0)
                    ItemButton.TextTransparency = 0.2
                    ItemButton.Text = item
                    ItemButton.Size = UDim2.new(0, 200, 0, 20)
                    ItemButton.BackgroundTransparency = 0.05
                    ItemButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                    ItemButton.BorderSizePixel = 0
                    ItemButton.TextSize = 12
                    ItemButton.Parent = DropdownList
                    local ItemUICorner = Instance.new('UICorner')
                    ItemUICorner.CornerRadius = UDim.new(0, 4)
                    ItemUICorner.Parent = ItemButton
                    ItemButton.MouseButton1Click:Connect(function()
                        Library._config._flags[flag] = item
                        Selected.Text = item
                        DropdownList.Visible = false
                        Config:save(game.GameId, Library._config)
                        if callback then
                            callback(item)
                        end
                    end)
                end
            end
            update_dropdown()
            Button.MouseButton1Click:Connect(function()
                DropdownList.Visible = not DropdownList.Visible
            end)
            function DropdownManager:Set(item)
                if table.find(items, item) then
                    Library._config._flags[flag] = item
                    Selected.Text = item
                    Config:save(game.GameId, Library._config)
                    if callback then
                        callback(item)
                    end
                end
            end
            function DropdownManager:Refresh(new_items)
                items = new_items
                update_dropdown()
            end
            return DropdownManager
        end
        function ModuleManager:CreateButton(text, callback)
            local font_params = Instance.new('GetTextBoundsParams')
            font_params.Text = text
            font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            font_params.Size = 12
            font_params.Width = 200
            local text_size = TextService:GetTextBoundsAsync(font_params)
            local Button = Instance.new('TextButton')
            Button.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Button.TextColor3 = Color3.fromRGB(200, 0, 0)
            Button.TextTransparency = 0.2
            Button.Text = text
            Button.BackgroundTransparency = 0.05
            Button.Size = UDim2.new(0, 231, 0, 30)
            Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Button.BorderSizePixel = 0
            Button.TextSize = 12
            Button.Parent = Holder
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Button
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(255, 0, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Button
            Button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)
        end
        function ModuleManager:CreateRightSectionModule(title)
            local Module = Instance.new('Frame')
            Module.Name = title
            Module.BackgroundTransparency = 0.05
            Module.Size = UDim2.new(0, 231, 0, 0)
            Module.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Module.BorderSizePixel = 0
            Module.Parent = RightSection
            Module.AutomaticSize = Enum.AutomaticSize.Y
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Module
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(255, 0, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Module
            local Inner = Instance.new('Frame')
            Inner.Name = 'Inner'
            Inner.BackgroundTransparency = 1
            Inner.Size = UDim2.new(1, 0, 0, 0)
            Inner.BorderSizePixel = 0
            Inner.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Inner.Parent = Module
            Inner.AutomaticSize = Enum.AutomaticSize.Y
            local InnerUIListLayout = Instance.new('UIListLayout')
            InnerUIListLayout.Padding = UDim.new(0, 8)
            InnerUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            InnerUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            InnerUIListLayout.Parent = Inner
            local InnerUIPadding = Instance.new('UIPadding')
            InnerUIPadding.PaddingTop = UDim.new(0, 8)
            InnerUIPadding.PaddingBottom = UDim.new(0, 8)
            InnerUIPadding.Parent = Inner
            local ModuleTitle = Instance.new('TextLabel')
            ModuleTitle.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            ModuleTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
            ModuleTitle.TextTransparency = 0.2
            ModuleTitle.Text = title
            ModuleTitle.Size = UDim2.new(0, font_size.X, 0, 16)
            ModuleTitle.Position = UDim2.new(0.04, 0, 0, 8)
            ModuleTitle.BackgroundTransparency = 1
            ModuleTitle.TextXAlignment = Enum.TextXAlignment.Left
            ModuleTitle.BorderSizePixel = 0
            ModuleTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
            ModuleTitle.TextSize = 13
            ModuleTitle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            ModuleTitle.Parent = Inner
            local UIGradient = Instance.new('UIGradient')
            UIGradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 0, 0))
            }
            UIGradient.Parent = ModuleTitle
            local Holder = Instance.new('Frame')
            Holder.Name = 'Holder'
            Holder.BackgroundTransparency = 1
            Holder.Size = UDim2.new(1, 0, 0, 0)
            Holder.BorderSizePixel = 0
            Holder.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Holder.Parent = Inner
            Holder.AutomaticSize = Enum.AutomaticSize.Y
            local HolderUIListLayout = Instance.new('UIListLayout')
            HolderUIListLayout.Padding = UDim.new(0, 8)
            HolderUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            HolderUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            HolderUIListLayout.Parent = Holder
            local HolderUIPadding = Instance.new('UIPadding')
            HolderUIPadding.PaddingTop = UDim.new(0, 8)
            HolderUIPadding.Parent = Holder
            local RightModuleManager = {}
            RightModuleManager.CreateParagraph = ModuleManager.CreateParagraph
            RightModuleManager.CreateText = ModuleManager.CreateText
            RightModuleManager.CreateTextbox = ModuleManager.CreateTextbox
            RightModuleManager.CreateCheckbox = ModuleManager.CreateCheckbox
            RightModuleManager.CreateSlider = ModuleManager.CreateSlider
            RightModuleManager.CreateDropdown = ModuleManager.CreateDropdown
            RightModuleManager.CreateButton = ModuleManager.CreateButton
            return RightModuleManager
        end
        return ModuleManager
    end
    return TabManager
end
